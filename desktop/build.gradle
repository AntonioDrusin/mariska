apply plugin: "java"

sourceCompatibility = 7
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.mygdx.game.desktop.DesktopLauncher"
project.ext.assetsDir = new File("./build/assets");
project.ext.spriteDir = new File("../core/sprites")

task copyResources(type: Copy) {
    from '../android/assets'
    into './build/assets'
    eachFile {println it.getSourceName()}
    include '**/*.*'
}

task buildSprites(type:Exec){
    workingDir project.assetsDir
    executable 'aseprite'
    def sheetFile =new File("./build/assets/spritesheet.png")
    def dataFile =new File("./build/assets/spritesheet.json")
    def argumentList = [ '-b', '--sheet', file(sheetFile), '--data', file(dataFile) ]
    args argumentList + files {project.spriteDir.listFiles()}
}

task makeResources() {
    dependsOn{
        copyResources
        buildSprites
    }
    doLast {
        println("Copying android assets")
    }
}

task run(dependsOn: classes, type: JavaExec) {
    dependsOn {
        makeResources
    }

    main = project.mainClassName
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    dependsOn {
        makeResources
    }
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}
dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}